<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->
		
	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan) --> 
	<context:component-scan base-package="com.hankyung.controller" />
	<context:component-scan base-package="com.hankyung.service" />
	<context:component-scan base-package="com.hankyung.persistence" />
	<context:component-scan base-package="com.hankyung.aop" />
	<context:component-scan base-package="com.hankyung.upload" />
		
	<!-- AOP의 설정으로 Proxy 객체를 자동으로 생성 -->
	<aop:aspectj-autoproxy />
	
	<!-- 인터셉터 빈을 등록 -->
	<beans:bean id="loginInterceptor" class="com.hankyung.interceptor.LoginInterceptor"></beans:bean>
	
	<!-- 인터셉터 호출을 위한 url mapping -->
	<interceptors>
		<interceptor>
			<mapping path="/member/update"/>
			<mapping path="/member/pwupdate"/>
			<mapping path="/member/delete"/>
			<mapping path="/lecture/wishView"/>
			<mapping path="/lecture/cartView"/>
			<beans:ref bean="loginInterceptor"/>
		</interceptor>
	</interceptors>

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	<!-- 스프링 빈을 태그로 등록하지 않고 자동으로 검색(auto scan) --> 
	<context:component-scan base-package="com.hankyung.*" />
	<!-- AOP의 설정으로 Proxy 객체를 자동으로 생성 -->
	<aop:aspectj-autoproxy />
	<!-- 파일 업로드 관련 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
    <!--  파일 업로드 최대 용량(byte) -->
		<beans:property name="maxUploadSize" value="10485760"/>
	</beans:bean>
	<!-- 파일업로드를 위한 디렉토리 설정 -->
	<!-- String uploadPath = new String("D:\upload");와 아래 세 줄이 동일 -->
	<beans:bean id="uploadPath" class="java.lang.String">
		<beans:constructor-arg value="D:\upload"/>
	</beans:bean>
	

</beans:beans>
